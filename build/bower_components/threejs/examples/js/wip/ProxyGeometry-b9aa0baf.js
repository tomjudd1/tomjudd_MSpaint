THREE.ProxyGeometry=function(){THREE.BufferGeometry.call(this),this.addEventListener("allocate",this.onGeometryAllocate),this.morphTargets=[],this.morphColors=[]},THREE.ProxyGeometry.prototype=Object.create(THREE.IndexedGeometry2.prototype),THREE.ProxyGeometry.prototype.constructor=THREE.ProxyGeometry,Object.defineProperties(THREE.ProxyGeometry.prototype,{vertices:{enumerable:!0,configurable:!0,get:function(){return this.createVertexProxies()}},faces:{enumerable:!0,get:function(){return this.createFaceProxies()}},faceVertexUvs:{enumerable:!0,get:function(){return this.createUvProxies()}},colors:{enumerable:!0,get:function(){return this.createColorProxies()}},skinIndices:{enumerable:!0,get:function(){return this.createSkinIndexProxies()}},skinWeights:{enumerable:!0,get:function(){return this.createSkinWeightProxies()}},verticesNeedUpdate:{enumerable:!0,get:function(){return this.attributes.position?this.attributes.position.needsUpdate:void 0},set:function(t){this.attributes.position&&(this.attributes.position.needsUpdate=t)}},colorsNeedUpdate:{enumerable:!0,get:function(){return this.attributes.color?this.attributes.color.needsUpdate:void 0},set:function(t){this.attributes.color&&(this.attributes.color.needsUpdate=t)}},normalsNeedUpdate:{enumerable:!0,get:function(){return this.attributes.normal?this.attributes.normal.needsUpdate:void 0},set:function(t){this.attributes.normal&&(this.attributes.normal.needsUpdate=t)}}}),THREE.ProxyGeometry.prototype.createVertexProxies=function(t){if(this.hasOwnProperty("vertices")?this.vertices=[]:Object.defineProperty(this,"vertices",{value:[],writable:!0}),this.populateProxyFromBuffer(this.vertices,"position",THREE.ProxyVector3,3),t)for(var e=0;e<t.length;e++)this.vertices[e].copy(t[e]);return this.vertices},THREE.ProxyGeometry.prototype.createFaceProxies=function(t){this.hasOwnProperty("faces")?this.faces=[]:Object.defineProperty(this,"faces",{value:[],writable:!0});var e=this.faces,r=!1,o=!1,i=!1,s=!1,a=!1;if(this.attributes.index&&(r=this.attributes.index.array),this.attributes.position&&(o=this.attributes.position.array),this.attributes.normal&&(i=this.attributes.normal.array),this.attributes.color&&(s=this.attributes.color.array),this.attributes.tangent&&(a=this.attributes.tangent.array),r)for(var n=0,h=r.length/3;h>n;n++){var c=new THREE.ProxyFace3(r,3*n);e.push(c)}else if(o)for(var n=0,h=o.length/3;h>n;n+=3){var l=n,u=n+1,y=n+2,c=new THREE.ProxyFace3(l,u,y);e.push(c)}if(t)for(var n=0,h=t.length;h>n;n++){var f=e[n],p=t[n];f.a=p.a,f.b=p.b,f.c=p.c}return i&&this.createFaceVertexNormalProxies(t),s&&this.createFaceVertexColorProxies(t),a&&this.createFaceVertexTangentProxies(t),this.faces},THREE.ProxyGeometry.prototype.createFaceVertexNormalProxies=function(t){if(this.attributes.normal&&this.attributes.normal.array)for(var e=this.attributes.normal.array,r=0,o=this.faces.length;o>r;r++){var i=this.faces[r];i.vertexNormals=[new THREE.ProxyVector3(e,3*i.a),new THREE.ProxyVector3(e,3*i.b),new THREE.ProxyVector3(e,3*i.c)],i.normal=new THREE.MultiVector3(i.vertexNormals)}if(t)for(var r=0,o=t.length;o>r;r++){var i=this.faces[r],s=t[r];if(s.vertexNormals.length>0)for(var a=0,n=i.vertexNormals.length;n>a;a++)i.vertexNormals[a].copy(s.vertexNormals[a]);else s.normal&&i.normal.copy(s.normal)}},THREE.ProxyGeometry.prototype.createFaceVertexColorProxies=function(t){if(this.attributes.color&&this.attributes.color.array)for(var e=this.attributes.color.array,r=0,o=this.faces.length;o>r;r++){var i=this.faces[r];if(this.attributes.index)i.vertexColors=[new THREE.ProxyColor(e,3*i.a),new THREE.ProxyColor(e,3*i.b),new THREE.ProxyColor(e,3*i.c)];else{var s=9*r;i.vertexColors=[new THREE.ProxyColor(e,s),new THREE.ProxyColor(e,s+3),new THREE.ProxyColor(e,s+6)]}i.color=new THREE.MultiColor(i.vertexColors)}if(t)for(var r=0,o=t.length;o>r;r++)for(var i=this.faces[r],a=t[r],n=0,h=i.vertexColors.length;h>n;n++)a.vertexColors.length>0?i.vertexColors[n].copy(a.vertexColors[n]):a.color&&i.color.copy(a.color)},THREE.ProxyGeometry.prototype.createFaceVertexTangentProxies=function(t){if(this.attributes.tangent&&this.attributes.tangent.array)for(var e=this.attributes.tangent.array,r=0,o=this.faces.length;o>r;r++){var i=this.faces[r];i.vertexTangents=[new THREE.ProxyVector3(e,3*i.a),new THREE.ProxyVector3(e,3*i.b),new THREE.ProxyVector3(e,3*i.c)]}if(t)for(var r=0,o=t.length;o>r;r++){var i=this.faces[r],s=t[r];if(s.vertexTangents.length>0)for(var a=0,n=i.vertexTangents.length;n>a;a++)i.vertexTangents[a].copy(s.vertexTangents[a])}},THREE.ProxyGeometry.prototype.createUvProxies=function(t){if(this.hasOwnProperty("faceVertexUvs")?this.faceVertexUvs=[[]]:Object.defineProperty(this,"faceVertexUvs",{value:[[]],writable:!0}),this.attributes.uv&&this.attributes.uv.array)for(var e=this.faces,r=this.attributes.uv.array,o=0,i=e.length;i>o;o++){var s=e[o];if(this.faceVertexUvs[0][o]=[],this.attributes.index)this.faceVertexUvs[0][o][0]=new THREE.ProxyVector2(r,2*s.a),this.faceVertexUvs[0][o][1]=new THREE.ProxyVector2(r,2*s.b),this.faceVertexUvs[0][o][2]=new THREE.ProxyVector2(r,2*s.c);else{var a=6*o;this.faceVertexUvs[0][o][0]=new THREE.ProxyVector2(r,a),this.faceVertexUvs[0][o][1]=new THREE.ProxyVector2(r,a+2),this.faceVertexUvs[0][o][2]=new THREE.ProxyVector2(r,a+4)}}if(t)for(var o=0,i=t.length;i>o;o++)for(var n=0,h=t[o].length;h>n;n++){var c=t[o][n];this.faceVertexUvs[0][o][n].copy(c)}return this.faceVertexUvs},THREE.ProxyGeometry.prototype.createSkinIndexProxies=function(t){if(this.hasOwnProperty("skinIndices")?this.skinIndices=[]:Object.defineProperty(this,"skinIndices",{value:[],writable:!0}),this.populateProxyFromBuffer(this.skinIndices,"skinIndex",THREE.ProxyVector4,4),t)for(var e=0;e<t.length;e++)this.skinIndices[e].copy(t[e]);return this.skinIndices},THREE.ProxyGeometry.prototype.createSkinWeightProxies=function(t){if(this.hasOwnProperty("skinWeights")?this.skinWeights=[]:Object.defineProperty(this,"skinWeights",{value:[],writable:!0}),this.populateProxyFromBuffer(this.skinWeights,"skinWeight",THREE.ProxyVector4,4),t)for(var e=0;e<t.length;e++)this.skinWeights[e].copy(t[e]);return this.skinWeights},THREE.ProxyGeometry.prototype.createColorProxies=function(t){if(this.hasOwnProperty("colors")?this.colors=[]:Object.defineProperty(this,"colors",{value:[],writable:!0}),this.populateProxyFromBuffer(this.colors,"color",THREE.ProxyColor,3),t)for(var e=0;e<t.length;e++)this.colors[e].copy(t[e]);return this.colors},THREE.ProxyGeometry.prototype.populateProxyFromBuffer=function(t,e,r,o,i,s){if(this.attributes[e]&&this.attributes[e].array){var a=this.attributes[e].array,n=o||this.attributes[e].itemSize,h=i||0;s=s||a.length/n-h;for(var c=h,l=h+s;l>c;c++)t.push(new r(a,c*n))}},THREE.ProxyGeometry.prototype.mergeVertices=function(){var t,e,r,o,i,s,a,n,h={},c=[],l=[],u=4,y=Math.pow(10,u);for(r=0,o=this.vertices.length;o>r;r++)t=this.vertices[r],e=Math.round(t.x*y)+"_"+Math.round(t.y*y)+"_"+Math.round(t.z*y),void 0===h[e]?(h[e]=r,c.push(this.vertices[r]),l[r]=c.length-1):l[r]=l[h[e]];var f=[];for(r=0,o=this.faces.length;o>r;r++){i=this.faces[r],i.a=l[i.a],i.b=l[i.b],i.c=l[i.c],s=[i.a,i.b,i.c];for(var p=-1,E=0;3>E;E++)if(s[E]==s[(E+1)%3]){p=E,f.push(r);break}}for(r=f.length-1;r>=0;r--){var x=f[r];for(this.faces.splice(x,1),a=0,n=this.faceVertexUvs.length;n>a;a++)this.faceVertexUvs[a].splice(x,1)}var v=this.vertices.length-c.length;return this.vertices=c,v},THREE.ProxyGeometry.prototype.onGeometryAllocate=function(){if(this.removeEventListener("allocate",this.onGeometryAllocate),this.hasOwnProperty("vertices")){var t=new THREE.Float32Attribute(this.vertices.length,3);this.addAttribute("position",t),this.createVertexProxies(this.vertices)}if(this.hasOwnProperty("faces")){var e=new THREE.Uint16Attribute(this.faces.length,3);if(this.addAttribute("index",e),this.faces.length>0){var r=this.hasOwnProperty("normals")||this.faces[0].normal||this.faces[0].vertexNormals.length>0,o=this.hasOwnProperty("colors")||this.faces[0].color||this.faces[0].vertexColors.length>0,i=this.faces[0].vertexTangents.length>0;if(r){var s=new THREE.Float32Attribute(this.vertices.length,3);this.addAttribute("normal",s)}if(o){var a=new THREE.Float32Attribute(3*this.faces.length,3);this.addAttribute("color",a)}if(i){var n=new THREE.Float32Attribute(3*this.faces.length,3);this.addAttribute("tangent",n)}}this.createFaceProxies(this.faces)}if(this.hasOwnProperty("faceVertexUvs")){var h=new THREE.Float32Attribute(3*this.faces.length,2);this.addAttribute("uv",h),this.createUvProxies(this.faceVertexUvs[0])}if(this.hasOwnProperty("skinIndices")){var c=new THREE.Float32Attribute(this.skinIndices.length,4);this.addAttribute("skinIndex",c),this.createSkinIndexProxies(this.skinIndices)}if(this.hasOwnProperty("skinWeights")){var l=new THREE.Float32Attribute(this.skinWeights.length,4);this.addAttribute("skinWeight",l),this.createSkinWeightProxies(this.skinWeights)}},THREE.ProxyGeometry.prototype.computeFaceNormals=function(){return this.dispatchEvent({type:"allocate"}),THREE.BufferGeometry.prototype.computeFaceNormals.call(this)},THREE.ProxyGeometry.prototype.computeVertexNormals=function(){return this.dispatchEvent({type:"allocate"}),THREE.BufferGeometry.prototype.computeVertexNormals.call(this)},THREE.ProxyGeometry.prototype.computeTangents=function(){this.dispatchEvent({type:"allocate"});var t=THREE.BufferGeometry.prototype.computeTangents.call(this);return t},THREE.ProxyGeometry.prototype.computeBoundingSphere=function(){return this.dispatchEvent({type:"allocate"}),THREE.BufferGeometry.prototype.computeBoundingSphere.call(this)},THREE.ProxyGeometry.prototype.computeBoundingBox=function(){return this.dispatchEvent({type:"allocate"}),THREE.BufferGeometry.prototype.computeBoundingBox.call(this)},THREE.ProxyGeometry.prototype.clone=function(){var t=THREE.BufferGeometry.prototype.clone.call(this),e=new THREE.ProxyGeometry;return e.attributes=t.attributes,e.offsets=t.offsets,e},THREE.EventDispatcher.prototype.apply(THREE.ProxyGeometry.prototype),THREE.ProxyGeometryIdCount=0;