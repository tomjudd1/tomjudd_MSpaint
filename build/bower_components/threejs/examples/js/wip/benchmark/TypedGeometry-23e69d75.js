THREE.TypedVector2=function(t,e){this.array=t,this.offset=2*e},THREE.TypedVector2.prototype={constructor:THREE.TypedVector2,get x(){return this.array[this.offset]},set x(t){this.array[this.offset]=t},get y(){return this.array[this.offset+1]},set y(t){this.array[this.offset+1]=t},set:function(t,e){return this.array[this.offset]=t,this.array[this.offset+1]=e,this}},THREE.TypedVector3=function(t,e){this.array=t,this.offset=3*e},THREE.TypedVector3.prototype={constructor:THREE.TypedVector3,get x(){return this.array[this.offset]},set x(t){this.array[this.offset]=t},get y(){return this.array[this.offset+1]},set y(t){this.array[this.offset+1]=t},get z(){return this.array[this.offset+2]},set z(t){this.array[this.offset+2]=t},set:function(t,e,s){return this.array[this.offset]=t,this.array[this.offset+1]=e,this.array[this.offset+2]=s,this},toString:function(){return"["+this.array[this.offset]+","+this.array[this.offset+1]+","+this.array[this.offset+2]+"]"}},THREE.TypedFace=function(t,e,s,o){this.positions=t,this.normals=e,this.uvs=s,this.offset=3*o},THREE.TypedFace.prototype={constructor:THREE.TypedFace,vertex:function(t){return new THREE.TypedVector3(this.positions,this.offset+t)},normal:function(t){return new THREE.TypedVector3(this.normals,this.offset+t)},uv:function(t){return new THREE.TypedVector2(this.uvs,this.offset+t)}},THREE.TypedGeometry=function(t){this.id=THREE.GeometryIdCount++,this.uuid=THREE.Math.generateUUID(),this.name="",this.positions=new Float32Array(3*t*3),this.normals=new Float32Array(3*t*3),this.uvs=new Float32Array(3*t*2),this.boundingBox=null,this.boundingSphere=null},THREE.TypedGeometry.prototype={constructor:THREE.TypedGeometry,face:function(t){return new THREE.TypedFace(this.positions,this.normals,this.uvs,t)},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.TypedGeometry.prototype);