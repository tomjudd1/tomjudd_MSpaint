THREE.ShaderLib.water={uniforms:{normalSampler:{type:"t",value:null},mirrorSampler:{type:"t",value:null},alpha:{type:"f",value:1},time:{type:"f",value:0},distortionScale:{type:"f",value:20},textureMatrix:{type:"m4",value:new THREE.Matrix4},sunColor:{type:"c",value:new THREE.Color(8355711)},sunDirection:{type:"v3",value:new THREE.Vector3(.70707,.70707,0)},eye:{type:"v3",value:new THREE.Vector3(0,0,0)},waterColor:{type:"c",value:new THREE.Color(5592405)}},vertexShader:["uniform mat4 textureMatrix;","uniform float time;","varying vec4 mirrorCoord;","varying vec3 worldPosition;","void main()","{","	mirrorCoord = modelMatrix * vec4( position, 1.0 );","	worldPosition = mirrorCoord.xyz;","	mirrorCoord = textureMatrix * mirrorCoord;","	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","uniform sampler2D mirrorSampler;","uniform float alpha;","uniform float time;","uniform float distortionScale;","uniform sampler2D normalSampler;","uniform vec3 sunColor;","uniform vec3 sunDirection;","uniform vec3 eye;","uniform vec3 waterColor;","varying vec4 mirrorCoord;","varying vec3 worldPosition;","vec4 getNoise( vec2 uv )","{","	vec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);","	vec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );","	vec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );","	vec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );","	vec4 noise = ( texture2D( normalSampler, uv0 ) ) +","		( texture2D( normalSampler, uv1 ) ) +","		( texture2D( normalSampler, uv2 ) ) +","		( texture2D( normalSampler, uv3 ) );","	return noise * 0.5 - 1.0;","}","void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor )","{","	vec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );","	float direction = max( 0.0, dot( eyeDirection, reflection ) );","	specularColor += pow( direction, shiny ) * sunColor * spec;","	diffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;","}","void main()","{","	vec4 noise = getNoise( worldPosition.xz );","	vec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );","	vec3 diffuseLight = vec3(0.0);","	vec3 specularLight = vec3(0.0);","	vec3 worldToEye = eye-worldPosition;","	vec3 eyeDirection = normalize( worldToEye );","	sunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );","	float distance = length(worldToEye);","	vec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;","	vec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.z + distortion ) );","	float theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );","	float rf0 = 0.3;","	float reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );","	vec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;","	vec3 albedo = mix( sunColor * diffuseLight * 0.3 + scatter, ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance );","	gl_FragColor = vec4( albedo, alpha );","}"].join("\n")},THREE.Water=function(e,r,t,i){function o(e,r){return void 0!==e?e:r}THREE.Object3D.call(this),this.name="water_"+this.id,i=i||{},this.matrixNeedsUpdate=!0;var a=o(i.textureWidth,512),s=o(i.textureHeight,512);this.clipBias=o(i.clipBias,0),this.alpha=o(i.alpha,1),this.time=o(i.time,0),this.normalSampler=o(i.waterNormals,null),this.sunDirection=o(i.sunDirection,new THREE.Vector3(.70707,.70707,0)),this.sunColor=new THREE.Color(o(i.sunColor,16777215)),this.waterColor=new THREE.Color(o(i.waterColor,8355711)),this.eye=o(i.eye,new THREE.Vector3(0,0,0)),this.distortionScale=o(i.distortionScale,20),this.renderer=e,this.scene=t,this.mirrorPlane=new THREE.Plane,this.normal=new THREE.Vector3(0,0,1),this.mirrorWorldPosition=new THREE.Vector3,this.cameraWorldPosition=new THREE.Vector3,this.rotationMatrix=new THREE.Matrix4,this.lookAtPosition=new THREE.Vector3(0,0,-1),this.clipPlane=new THREE.Vector4,r instanceof THREE.PerspectiveCamera?this.camera=r:(this.camera=new THREE.PerspectiveCamera,console.log(this.name+": camera is not a Perspective Camera!")),this.textureMatrix=new THREE.Matrix4,this.mirrorCamera=this.camera.clone(),this.texture=new THREE.WebGLRenderTarget(a,s),this.tempTexture=new THREE.WebGLRenderTarget(a,s);var n=THREE.ShaderLib.water,l=THREE.UniformsUtils.clone(n.uniforms);this.material=new THREE.ShaderMaterial({fragmentShader:n.fragmentShader,vertexShader:n.vertexShader,uniforms:l,transparent:!0}),this.material.uniforms.mirrorSampler.value=this.texture,this.material.uniforms.textureMatrix.value=this.textureMatrix,this.material.uniforms.alpha.value=this.alpha,this.material.uniforms.time.value=this.time,this.material.uniforms.normalSampler.value=this.normalSampler,this.material.uniforms.sunColor.value=this.sunColor,this.material.uniforms.waterColor.value=this.waterColor,this.material.uniforms.sunDirection.value=this.sunDirection,this.material.uniforms.distortionScale.value=this.distortionScale,this.material.uniforms.eye.value=this.eye,THREE.Math.isPowerOfTwo(a)&&THREE.Math.isPowerOfTwo(s)||(this.texture.generateMipmaps=!1,this.tempTexture.generateMipmaps=!1),this.updateTextureMatrix(),this.render()},THREE.Water.prototype=Object.create(THREE.Mirror.prototype),THREE.Water.prototype.constructor=THREE.Water,THREE.Water.prototype.updateTextureMatrix=function(){function e(e){return e?0>e?-1:1:0}this.updateMatrixWorld(),this.camera.updateMatrixWorld(),this.mirrorWorldPosition.setFromMatrixPosition(this.matrixWorld),this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld),this.rotationMatrix.extractRotation(this.matrixWorld),this.normal.set(0,0,1),this.normal.applyMatrix4(this.rotationMatrix);var r=this.mirrorWorldPosition.clone().sub(this.cameraWorldPosition);r.reflect(this.normal).negate(),r.add(this.mirrorWorldPosition),this.rotationMatrix.extractRotation(this.camera.matrixWorld),this.lookAtPosition.set(0,0,-1),this.lookAtPosition.applyMatrix4(this.rotationMatrix),this.lookAtPosition.add(this.cameraWorldPosition);var t=this.mirrorWorldPosition.clone().sub(this.lookAtPosition);t.reflect(this.normal).negate(),t.add(this.mirrorWorldPosition),this.up.set(0,-1,0),this.up.applyMatrix4(this.rotationMatrix),this.up.reflect(this.normal).negate(),this.mirrorCamera.position.copy(r),this.mirrorCamera.up=this.up,this.mirrorCamera.lookAt(t),this.mirrorCamera.aspect=this.camera.aspect,this.mirrorCamera.updateProjectionMatrix(),this.mirrorCamera.updateMatrixWorld(),this.mirrorCamera.matrixWorldInverse.getInverse(this.mirrorCamera.matrixWorld),this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.mirrorCamera.projectionMatrix),this.textureMatrix.multiply(this.mirrorCamera.matrixWorldInverse),this.mirrorPlane.setFromNormalAndCoplanarPoint(this.normal,this.mirrorWorldPosition),this.mirrorPlane.applyMatrix4(this.mirrorCamera.matrixWorldInverse),this.clipPlane.set(this.mirrorPlane.normal.x,this.mirrorPlane.normal.y,this.mirrorPlane.normal.z,this.mirrorPlane.constant);var i=new THREE.Vector4,o=this.mirrorCamera.projectionMatrix;i.x=(e(this.clipPlane.x)+o.elements[8])/o.elements[0],i.y=(e(this.clipPlane.y)+o.elements[9])/o.elements[5],i.z=-1,i.w=(1+o.elements[10])/o.elements[14];var a=new THREE.Vector4;a=this.clipPlane.multiplyScalar(2/this.clipPlane.dot(i)),o.elements[2]=a.x,o.elements[6]=a.y,o.elements[10]=a.z+1-this.clipBias,o.elements[14]=a.w;var s=new THREE.Vector3;s.setFromMatrixPosition(this.camera.matrixWorld),this.eye=s,this.material.uniforms.eye.value=this.eye};