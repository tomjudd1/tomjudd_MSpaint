THREE.WebGLDeferredRenderer=function(e){function r(e){var r=e.material.uniforms;r.matProjInverse&&(r.matProjInverse.value=D),r.matView&&(r.matView.value=S.matrixWorldInverse);var a=e.userData.originalLight;a&&(e.visible=a.visible,a instanceof THREE.PointLight?Q(e):a instanceof THREE.SpotLight?X(e):a instanceof THREE.DirectionalLight?J(e):a instanceof THREE.HemisphereLight?$(e):a instanceof THREE.AreaLight&&rr(e))}var a=this,t=void 0!==e.width?e.width:800,i=void 0!==e.height?e.height:600,n=void 0!==e.scale?e.scale:1,o=Math.floor(n*t),l=Math.floor(n*i),s=void 0!==e.brightness?e.brightness:1,m=void 0!==e.tonemapping?e.tonemapping:THREE.SimpleOperator,h=void 0!==e.antialias?e.antialias:!1;this.renderer=e.renderer,void 0===this.renderer&&(this.renderer=new THREE.WebGLRenderer({antialias:!1}),this.renderer.setSize(t,i),this.renderer.setClearColor(0,0),this.renderer.autoClear=!1),this.domElement=this.renderer.domElement;var d,p,E,u,v,c,g,f,T,R,H=this.renderer.context,S=null,D=new THREE.Matrix4,M=new THREE.Vector3,w=new THREE.Vector3,L=new THREE.Vector3,x=new THREE.Vector3,y=new THREE.Vector3,N=new THREE.Vector3,P=new THREE.SphereGeometry(1,16,8),b=new THREE.PlaneBufferGeometry(2,2),F=new THREE.Color(0),A=THREE.ShaderDeferred.color,C=THREE.ShaderDeferred.normalDepth,W=THREE.ShaderDeferred.emissiveLight,U=THREE.ShaderDeferred.pointLight,G=THREE.ShaderDeferred.spotLight,I=THREE.ShaderDeferred.directionalLight,B=THREE.ShaderDeferred.hemisphereLight,O=THREE.ShaderDeferred.areaLight,V=THREE.ShaderDeferred.composite,z=[],k=new THREE.ShaderMaterial;k.visible=!1;var _=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(C.uniforms),vertexShader:C.vertexShader,fragmentShader:C.fragmentShader,blending:THREE.NoBlending}),j=function(e){if(e.material instanceof THREE.MeshFaceMaterial){for(var r=[],a=[],t=e.material.materials,i=0,n=t.length;n>i;i++){var o=K(t[i]);o.transparent?(r.push(k),a.push(k)):(r.push(o.colorMaterial),a.push(o.normalDepthMaterial))}e.userData.colorMaterial=new THREE.MeshFaceMaterial(r),e.userData.normalDepthMaterial=new THREE.MeshFaceMaterial(a)}else{var o=K(e.material);e.userData.colorMaterial=o.colorMaterial,e.userData.normalDepthMaterial=o.normalDepthMaterial,e.userData.transparent=o.transparent}},K=function(e){var r={},a=THREE.UniformsUtils.clone(A.uniforms),t={USE_MAP:!!e.map,USE_ENVMAP:!!e.envMap,GAMMA_INPUT:!0},i=new THREE.ShaderMaterial({fragmentShader:A.fragmentShader,vertexShader:A.vertexShader,uniforms:a,defines:t,shading:e.shading});if(e instanceof THREE.MeshBasicMaterial)var n=F,s=e.color;else var n=e.color,s=void 0!==e.emissive?e.emissive:F;var m=void 0!==e.specular?e.specular:F,h=void 0!==e.shininess?e.shininess:1,d=void 0!==e.wrapAround&&e.wrapAround?-1:1,p=void 0!==e.metal&&e.metal?1:-1;a.emissive.value.copyGammaToLinear(s),a.diffuse.value.copyGammaToLinear(n),a.specular.value.copyGammaToLinear(m),a.shininess.value=h,a.wrapAround.value=d,a.additiveSpecular.value=p,a.map.value=e.map,e.envMap&&(a.envMap.value=e.envMap,a.useRefract.value=e.envMap.mapping instanceof THREE.CubeRefractionMapping,a.refractionRatio.value=e.refractionRatio,a.combine.value=e.combine,a.reflectivity.value=e.reflectivity,a.flipEnvMap.value=e.envMap instanceof THREE.WebGLRenderTargetCube?1:-1,a.samplerNormalDepth.value=compNormalDepth.renderTarget2,a.viewWidth.value=o,a.viewHeight.value=l,z.push({material:i})),i.vertexColors=e.vertexColors,i.morphTargets=e.morphTargets,i.morphNormals=e.morphNormals,i.skinning=e.skinning,i.alphaTest=e.alphaTest,i.wireframe=e.wireframe;var E;if(e.map?E=e.map:e.specularMap?E=e.specularMap:e.normalMap?E=e.normalMap:e.bumpMap&&(E=e.bumpMap),void 0!==E){var u=E.offset,v=E.repeat;a.offsetRepeat.value.set(u.x,u.y,v.x,v.y)}if(r.colorMaterial=i,e.morphTargets||e.skinning||e.bumpMap){var a=THREE.UniformsUtils.clone(C.uniforms),t={USE_BUMPMAP:!!e.bumpMap},c=new THREE.ShaderMaterial({uniforms:a,vertexShader:C.vertexShader,fragmentShader:C.fragmentShader,shading:e.shading,defines:t,blending:THREE.NoBlending});if(c.morphTargets=e.morphTargets,c.morphNormals=e.morphNormals,c.skinning=e.skinning,e.bumpMap){a.bumpMap.value=e.bumpMap,a.bumpScale.value=e.bumpScale;var u=e.bumpMap.offset,v=e.bumpMap.repeat;a.offsetRepeat.value.set(u.x,u.y,v.x,v.y)}}else var c=_.clone();return c.wireframe=e.wireframe,c.vertexColors=e.vertexColors,r.normalDepthMaterial=c,r.transparent=e.transparent,r},Q=function(e){var r=e.userData.originalLight,a=e.material.uniforms,t=r.distance;t>0?(e.scale.set(1,1,1).multiplyScalar(t),a.lightRadius.value=t,M.setFromMatrixPosition(r.matrixWorld),M.applyMatrix4(S.matrixWorldInverse),a.lightPositionVS.value.copy(M),e.position.setFromMatrixPosition(r.matrixWorld)):a.lightRadius.value=1/0;var i=r.intensity*r.intensity;a.lightIntensity.value=i,a.lightColor.value.copyGammaToLinear(r.color)},q=function(e){var r,a=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(U.uniforms),vertexShader:U.vertexShader,fragmentShader:U.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,transparent:!0,side:THREE.BackSide});e.distance>0?r=P:(r=b,a.depthTest=!1,a.side=THREE.FrontSide),a.uniforms.viewWidth.value=o,a.uniforms.viewHeight.value=l,a.uniforms.samplerColor.value=d.renderTarget2,a.uniforms.samplerNormalDepth.value=compNormalDepth.renderTarget2;var t=new THREE.Mesh(r,a);return t.userData.originalLight=e,z.push({material:a}),Q(t),t},X=function(e){var r=e.userData.originalLight,a=e.material.uniforms,t=S.matrixWorldInverse,i=r.matrixWorld;M.setFromMatrixPosition(i),M.applyMatrix4(t),w.setFromMatrixPosition(i),L.setFromMatrixPosition(r.target.matrixWorld),w.sub(L),w.normalize(),w.transformDirection(t),a.lightPositionVS.value.copy(M),a.lightDirectionVS.value.copy(w),a.lightAngle.value=r.angle,a.lightDistance.value=r.distance;var n=r.intensity*r.intensity;a.lightIntensity.value=n,a.lightColor.value.copyGammaToLinear(r.color)},Y=function(e){var r=THREE.UniformsUtils.clone(G.uniforms),a=new THREE.ShaderMaterial({uniforms:r,vertexShader:G.vertexShader,fragmentShader:G.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,depthTest:!1,transparent:!0});r.viewWidth.value=o,r.viewHeight.value=l,r.samplerColor.value=d.renderTarget2,r.samplerNormalDepth.value=compNormalDepth.renderTarget2;var t=new THREE.Mesh(b,a);return t.userData.originalLight=e,z.push({material:a}),X(t),t},J=function(e){var r=e.userData.originalLight,a=e.material.uniforms;w.setFromMatrixPosition(r.matrixWorld),L.setFromMatrixPosition(r.target.matrixWorld),w.sub(L),w.normalize(),w.transformDirection(S.matrixWorldInverse),a.lightDirectionVS.value.copy(w);var t=r.intensity*r.intensity;a.lightIntensity.value=t,a.lightColor.value.copyGammaToLinear(r.color)},Z=function(e){var r=THREE.UniformsUtils.clone(I.uniforms),a=new THREE.ShaderMaterial({uniforms:r,vertexShader:I.vertexShader,fragmentShader:I.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,depthTest:!1,transparent:!0});r.viewWidth.value=o,r.viewHeight.value=l,r.samplerColor.value=d.renderTarget2,r.samplerNormalDepth.value=compNormalDepth.renderTarget2;var t=new THREE.Mesh(b,a);return t.userData.originalLight=e,z.push({material:a}),J(t),t},$=function(e){var r=e.userData.originalLight,a=e.material.uniforms;w.setFromMatrixPosition(r.matrixWorld),w.normalize(),w.transformDirection(S.matrixWorldInverse),a.lightDirectionVS.value.copy(w);var t=r.intensity*r.intensity;a.lightIntensity.value=t,a.lightColorSky.value.copyGammaToLinear(r.color),a.lightColorGround.value.copyGammaToLinear(r.groundColor)},er=function(e){var r=THREE.UniformsUtils.clone(B.uniforms),a=new THREE.ShaderMaterial({uniforms:r,vertexShader:B.vertexShader,fragmentShader:B.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,depthTest:!1,transparent:!0});r.viewWidth.value=o,r.viewHeight.value=l,r.samplerColor.value=d.renderTarget2,r.samplerNormalDepth.value=compNormalDepth.renderTarget2;var t=new THREE.Mesh(b,a);return t.userData.originalLight=e,z.push({material:a}),$(t),t},rr=function(e){var r=e.userData.originalLight,a=e.material.uniforms,t=r.matrixWorld,i=S.matrixWorldInverse;M.setFromMatrixPosition(t),M.applyMatrix4(i),a.lightPositionVS.value.copy(M),x.copy(r.right),x.transformDirection(t),x.transformDirection(i),y.copy(r.normal),y.transformDirection(t),y.transformDirection(i),N.crossVectors(x,y),N.normalize(),a.lightRightVS.value.copy(x),a.lightNormalVS.value.copy(y),a.lightUpVS.value.copy(N),a.lightWidth.value=r.width,a.lightHeight.value=r.height,a.constantAttenuation.value=r.constantAttenuation,a.linearAttenuation.value=r.linearAttenuation,a.quadraticAttenuation.value=r.quadraticAttenuation;var n=r.intensity*r.intensity;a.lightIntensity.value=n,a.lightColor.value.copyGammaToLinear(r.color)},ar=function(e){var r=THREE.UniformsUtils.clone(O.uniforms),a=new THREE.ShaderMaterial({uniforms:r,vertexShader:O.vertexShader,fragmentShader:O.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,depthTest:!1,transparent:!0});r.viewWidth.value=o,r.viewHeight.value=l,r.samplerColor.value=d.renderTarget2,r.samplerNormalDepth.value=compNormalDepth.renderTarget2;var t=new THREE.Mesh(b,a);return t.userData.originalLight=e,z.push({material:a}),rr(t),t},tr=function(){var e=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(W.uniforms),vertexShader:W.vertexShader,fragmentShader:W.fragmentShader,depthTest:!1,depthWrite:!1,blending:THREE.NoBlending});e.uniforms.viewWidth.value=o,e.uniforms.viewHeight.value=l,e.uniforms.samplerColor.value=d.renderTarget2;var r=new THREE.Mesh(b,e);return z.push({material:e}),r},ir=function(e){if(!e.userData.deferredInitialized){if(e.material&&j(e),e instanceof THREE.PointLight){var r=q(e);e.distance>0?R.add(r):T.add(r)}else if(e instanceof THREE.SpotLight){var r=Y(e);T.add(r)}else if(e instanceof THREE.DirectionalLight){var r=Z(e);T.add(r)}else if(e instanceof THREE.HemisphereLight){var r=er(e);T.add(r)}else if(e instanceof THREE.AreaLight){var r=ar(e);T.add(r)}e.userData.deferredInitialized=!0}},nr=function(e){e.material&&(e.material=e.userData.transparent?k:e.userData.colorMaterial)},or=function(e){e.material&&(e.material=e.userData.transparent?k:e.userData.normalDepthMaterial)};this.setAntialias=function(e){h=e,h?(f.enabled=!0,g.renderToScreen=!1):(f.enabled=!1,g.renderToScreen=!0)},this.getAntialias=function(){return h},this.addEffect=function(e,r,a){e.material&&e.uniforms&&(r&&(e.uniforms[r].value=compNormalDepth.renderTarget2),a&&(e.uniforms[a].value=d.renderTarget2),(r||a)&&z.push({material:e.material,normalDepth:r,color:a})),E.insertPass(e,-1)},this.setScale=function(e){n=e,o=Math.floor(n*t),l=Math.floor(n*i),compNormalDepth.setSize(o,l),d.setSize(o,l),p.setSize(o,l),E.setSize(o,l),d.renderTarget2.shareDepthFrom=compNormalDepth.renderTarget2,p.renderTarget2.shareDepthFrom=compNormalDepth.renderTarget2;for(var r=0,a=z.length;a>r;r++){var s=z[r],m=s.material,h=m.uniforms,u=void 0!==s.color?s.color:"samplerColor",v=void 0!==s.normalDepth?s.normalDepth:"samplerNormalDepth";h[u]&&(h[u].value=d.renderTarget2),h[v]&&(h[v].value=compNormalDepth.renderTarget2),h.viewWidth&&(h.viewWidth.value=o),h.viewHeight&&(h.viewHeight.value=l)}g.uniforms.samplerLight.value=p.renderTarget2,f.uniforms.resolution.value.set(1/t,1/i)},this.setSize=function(e,r){t=e,i=r,this.renderer.setSize(t,i),this.setScale(n)},this.render=function(e,a){if(!e.userData.lightSceneProxy){e.userData.lightSceneProxy=new THREE.Scene,e.userData.lightSceneFullscreen=new THREE.Scene;var t=tr();e.userData.lightSceneFullscreen.add(t)}S=a,R=e.userData.lightSceneProxy,T=e.userData.lightSceneFullscreen,u.camera=S,passNormalDepth.camera=S,c.camera=S,v.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),u.scene=e,passNormalDepth.scene=e,v.scene=T,c.scene=R,e.traverse(ir),e.autoUpdate=!1,e.updateMatrixWorld(),e.traverse(or),this.renderer.autoClearDepth=!0,this.renderer.autoClearStencil=!0,H.stencilOp(H.REPLACE,H.REPLACE,H.REPLACE),H.stencilFunc(H.ALWAYS,1,4294967295),H.clearStencil(0),compNormalDepth.render(),H.stencilFunc(H.EQUAL,1,4294967295),H.stencilOp(H.KEEP,H.KEEP,H.KEEP),e.traverse(nr),this.renderer.autoClearDepth=!0,this.renderer.autoClearStencil=!1,d.render(),this.renderer.autoClearDepth=!1,e.autoUpdate=!0,H.depthFunc(H.GEQUAL),D.getInverse(S.projectionMatrix);for(var i=0,n=R.children.length;n>i;i++){var o=R.children[i];r(o)}for(var i=0,n=T.children.length;n>i;i++){var o=T.children[i];r(o)}p.render(),this.renderer.autoClearDepth=!0,this.renderer.autoClearStencil=!0,H.depthFunc(H.LEQUAL),H.disable(H.STENCIL_TEST),E.render(.1)};var lr=function(){var e={minFilter:THREE.NearestFilter,magFilter:THREE.LinearFilter,stencilBuffer:!0,format:THREE.RGBAFormat,type:THREE.FloatType},r={minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,stencilBuffer:!0,format:THREE.RGBAFormat,type:THREE.FloatType},n={minFilter:THREE.NearestFilter,magFilter:THREE.LinearFilter,stencilBuffer:!1,format:THREE.RGBFormat,type:THREE.UnsignedByteType},T=new THREE.WebGLRenderTarget(o,l,r),R=new THREE.WebGLRenderTarget(o,l,r),H=new THREE.WebGLRenderTarget(o,l,e),S=new THREE.WebGLRenderTarget(o,l,n);T.generateMipmaps=!1,R.generateMipmaps=!1,H.generateMipmaps=!1,S.generateMipmaps=!1,passNormalDepth=new THREE.RenderPass,passNormalDepth.clear=!0,compNormalDepth=new THREE.EffectComposer(a.renderer,R),compNormalDepth.addPass(passNormalDepth),u=new THREE.RenderPass,u.clear=!0,d=new THREE.EffectComposer(a.renderer,T),d.addPass(u),d.renderTarget2.shareDepthFrom=compNormalDepth.renderTarget2,v=new THREE.RenderPass,v.clear=!0,c=new THREE.RenderPass,c.clear=!1,p=new THREE.EffectComposer(a.renderer,H),p.addPass(v),p.addPass(c),p.renderTarget2.shareDepthFrom=compNormalDepth.renderTarget2,g=new THREE.ShaderPass(V),g.uniforms.samplerLight.value=p.renderTarget2,g.uniforms.brightness.value=s,g.material.blending=THREE.NoBlending,g.clear=!0;var D;switch(m){case THREE.SimpleOperator:D={TONEMAP_SIMPLE:!0};break;case THREE.LinearOperator:D={TONEMAP_LINEAR:!0};break;case THREE.ReinhardOperator:D={TONEMAP_REINHARD:!0};break;case THREE.FilmicOperator:D={TONEMAP_FILMIC:!0};break;case THREE.UnchartedOperator:D={TONEMAP_UNCHARTED:!0}}g.material.defines=D,f=new THREE.ShaderPass(THREE.FXAAShader),f.uniforms.resolution.value.set(1/t,1/i),f.renderToScreen=!0,E=new THREE.EffectComposer(a.renderer,S),E.addPass(g),E.addPass(f),h?(f.enabled=!0,g.renderToScreen=!1):(f.enabled=!1,g.renderToScreen=!0)};lr()},THREE.NoOperator=0,THREE.SimpleOperator=1,THREE.LinearOperator=2,THREE.ReinhardOperator=3,THREE.FilmicOperator=4,THREE.UnchartedOperator=5;